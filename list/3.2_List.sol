
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract List {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    struct task {
        string name;
        uint32 timestamp;
        bool status;
    }

    mapping(uint8 => task) taskList;
    
    uint8 taskCounter;

    constructor() public {
		
		require(tvm.pubkey() != 0, 101);
		
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
	}

    modifier checkOwnerAndAccept {
		
		require(msg.pubkey() == tvm.pubkey(), 102);
		tvm.accept();
		_;
	}

    function addTaskAuto() public checkOwnerAndAccept {
        taskList[taskCounter + 1] = task ("Сделать дела", now, false);
        taskCounter++;
    }

    function addTaskManually(string taskName) public checkOwnerAndAccept {
        taskList[taskCounter + 1] = task (taskName, now, false);
        taskCounter++;
    }

    function checkNumber() public checkOwnerAndAccept returns(uint8) {
        uint8 number = 0;
        for (uint8 index = 1; index <= taskCounter; index++) {
            if (taskList[index].status == false && taskList[index].name != "") {
                number++;
            } 
        }
        return number;
    }

    function checkList() public checkOwnerAndAccept returns(string[]){
        string[] listOfOpenTasks;
        for (uint8 index = 1; index <= taskCounter; index++) {
            listOfOpenTasks.push(taskList[index].name);
        }

        return listOfOpenTasks;
    }

    function checkTask(uint8 index) public checkOwnerAndAccept returns(string) {
        return (taskList[index].name);
    }

    function removeTask(uint8 index) public checkOwnerAndAccept {
        delete taskList[index];
    }

    function FullfillTask(uint8 index) public checkOwnerAndAccept {
        if (taskList[index].name != "") {
            taskList[index].status = true;
        } 
    }
}
