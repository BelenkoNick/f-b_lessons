
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'GamingObjectInterface.sol';

// This is class that describes you smart contract.
contract GamingObject is GamingObjectInterface {
    
    uint healthValue;
    uint shieldValue;

    address attackerAddress;

    
    function takeAHit(uint attackValue) external override {
        tvm.accept();
        healthValue -= (attackValue - shieldValue);
        attackerAddress = msg.sender;
        // After attack checkDead is called to check the health of Object.
        checkDead();
    }

    function checkDead() private returns (string){
        tvm.accept();
        if (healthValue < 1) {
            // If the object has no health, call destroy function.
            destroyObject();
            return "Dead";
        } else {
            return "Not Dead";
        }
    }

    function destroyObject() virtual internal {
        tvm.accept();
        // Transfer and Destroy function is called.
        sendTransactionAndDestroy();
    }

    function sendTransactionAndDestroy() internal {
        tvm.accept();
        attackerAddress.transfer(1, true, 160);
    }
    
}
