
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

import 'GamingObject.sol';

// This is class that describes you smart contract.
contract BaseStation is GamingObject {
    
    struct unitAddresses {
        GamingObjectInterface unitAddress;    
    }

    unitAddresses[] addresses;

    function getShieldValue(uint newShieldValue) public override {
        tvm.accept();
        shieldValue = newShieldValue;
    }
    
    function addUnit(GamingObjectInterface unitCallerAddress) external {
        tvm.accept();
        // This function is called from the Unit and accepts Unit's address.
        addresses.push(unitAddresses(unitCallerAddress));
 
    }

     function destroyUnit() external {
        // Now it destroys only the last one.
        tvm.accept();
        addresses.pop();
    } 
    
    function destroyObject() internal override {
        tvm.accept();
        sendTransactionAndDestroy();
        // For every Unit, that this base has, call sendTransactionAndDestroy function.
        for (uint index = 0; index <addresses.length; index++) {
            addresses[index].unitAddress.destroyUnitIfBaseIsDead();
        }
    }


}
